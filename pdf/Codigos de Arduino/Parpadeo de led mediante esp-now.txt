
 ---Emisor---

#include "ESP32_NOW.h"
#include "WiFi.h"
#include <esp_mac.h>  // Para las macros MAC2STR y MACSTR

/* Definiciones */

#define ESPNOW_WIFI_CHANNEL 6

/* Clases */

// Es necesario crear una nueva clase que herede de la clase ESP_NOW_Peer.

class ESP_NOW_Broadcast_Peer : public ESP_NOW_Peer {
public:

  // Constructor de la clase que utiliza la dirección de difusión
  ESP_NOW_Broadcast_Peer(uint8_t channel, wifi_interface_t iface, const uint8_t *lmk) : ESP_NOW_Peer(ESP_NOW.BROADCAST_ADDR, channel, iface, lmk) {}

  // Destructor de la clase
  ~ESP_NOW_Broadcast_Peer() {
    remove();
  }

  // Función para inicializar correctamente el ESP-NOW y registrar el par de transmisión
  bool begin() {
    if (!ESP_NOW.begin() || !add()) {
      log_e("Failed to initialize ESP-NOW or register the broadcast peer");
      return false;
    }
    return true;
  }

  // Función para enviar un mensaje a todos los dispositivos dentro de la red
  bool send_message(const uint8_t *data, size_t len) {
    if (!send(data, len)) {
      log_e("Failed to broadcast message");
      return false;
    }
    return true;
  }
};

/* Variables globales */

uint32_t msg_count = 0;

// Crear un objeto de transmisión peer
ESP_NOW_Broadcast_Peer broadcast_peer(ESPNOW_WIFI_CHANNEL, WIFI_IF_STA, NULL);

/* Main */

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(10);
  }

  // Inicializar el módulo Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  while (!WiFi.STA.started()) {
    delay(100);
  }

  Serial.println("ESP-NOW Example - Broadcast Master");
  Serial.println("Wi-Fi parameters:");
  Serial.println("  Mode: STA");
  Serial.println("  MAC Address: " + WiFi.macAddress());
  Serial.printf("  Channel: %d\n", ESPNOW_WIFI_CHANNEL);

  // Registrar el par de transmisión
  if (!broadcast_peer.begin()) {
    Serial.println("Failed to initialize broadcast peer");
    Serial.println("Reebooting in 5 seconds...");
    delay(5000);
    ESP.restart();
  }

  Serial.println("Configuración completa. Se transmiten mensajes cada 5 segundos.");
}

void loop() {
  // Transmitir un mensaje a todos los dispositivos dentro de la red
  char data[32];
  snprintf(data, sizeof(data), "LED_ON");
  
  Serial.printf("Broadcasting mensaje: %s\n", data);

  if (!broadcast_peer.send_message((uint8_t *)data, sizeof(data))) {
    Serial.println("No se pudo transmitir el mensaje.");
  }

  delay(5000);

  // Enviar mensaje para apagar el LED
  snprintf(data, sizeof(data), "LED_OFF");
  
  Serial.printf("Broadcasting mensaje: %s\n", data);

  if (!broadcast_peer.send_message((uint8_t *)data, sizeof(data))) {
    Serial.println("No se pudo transmitir el mensaje.");
  }

  delay(5000);
}

---Receptor---

#include <esp_now.h>
#include <WiFi.h>
#include <esp_mac.h>
#include <vector>

#define ESPNOW_WIFI_CHANNEL 6
#define LED_PIN 4  // Cambiado a pin 2 para pruebas

class ESP_NOW_Peer_Class {
public:
  ESP_NOW_Peer_Class(const uint8_t *mac_addr, uint8_t channel, wifi_interface_t iface) {
    memcpy(peer_addr, mac_addr, 6);
    this->channel = channel;
    this->iface = iface;
  }

  bool add_peer() {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, peer_addr, 6);
    peerInfo.channel = channel;
    peerInfo.ifidx = iface;
    return esp_now_add_peer(&peerInfo) == ESP_OK;
  }

  void onReceive(const uint8_t *data, int len) {
    Serial.printf("Received a message from master " MACSTR "\n", MAC2STR(peer_addr));
    Serial.printf("  Message: %s\n", (char *)data);

    if (strcmp((char *)data, "LED_ON") == 0) {
      digitalWrite(LED_PIN, HIGH);
      Serial.println("Comando recibido: Encender LED");
      Serial.printf("Estado del pin LED (%d): %d\n", LED_PIN, digitalRead(LED_PIN));
    } else if (strcmp((char *)data, "LED_OFF") == 0) {
      digitalWrite(LED_PIN, LOW);
      Serial.println("Comando recibido: Apagar LED");
      Serial.printf("Estado del pin LED (%d): %d\n", LED_PIN, digitalRead(LED_PIN));
    }
  }

  const uint8_t* addr() const { return peer_addr; }

private:
  uint8_t peer_addr[6];
  uint8_t channel;
  wifi_interface_t iface;
};

std::vector<ESP_NOW_Peer_Class> masters;

void onDataReceived(const esp_now_recv_info_t *esp_now_info, const uint8_t *data, int len) {
  Serial.println("Datos recibidos en onDataReceived");
  const uint8_t *mac_addr = esp_now_info->src_addr;
  for (auto &master : masters) {
    if (memcmp(mac_addr, master.addr(), 6) == 0) {
      master.onReceive(data, len);
      return;
    }
  }
  
  // Si llegamos aquí, es un nuevo maestro
  ESP_NOW_Peer_Class new_master(mac_addr, ESPNOW_WIFI_CHANNEL, WIFI_IF_STA);
  masters.push_back(new_master);
  if (!masters.back().add_peer()) {
    Serial.println("Failed to register the new master");
    return;
  }
  
  // Procesar el mensaje recibido
  masters.back().onReceive(data, len);
}

void conectarWiFi() {
  const char* ssid = "WiFimoviljavi";
  const char* password = "carrionp";
  Serial.println("Estado inicial del Wi-Fi:");
  WiFi.disconnect(true);
  delay(1000);
  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  Serial.println("Iniciando conexión a Wi-Fi...");
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print("Intento ");
    Serial.print(attempts + 1);
    Serial.println(" de conexión a Wi-Fi...");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Conexión exitosa");
    Serial.print("Dirección IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("Error: No se pudo conectar a Wi-Fi.");
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(10);
  }
  
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  Serial.printf("LED pin (%d) configurado como salida\n", LED_PIN);
  
  conectarWiFi();
  
  Serial.println("ESP-NOW Example - Broadcast Slave");
  Serial.println("Wi-Fi parameters:");
  Serial.println("  Mode: STA");
  Serial.println("  MAC Address: " + WiFi.macAddress());
  Serial.printf("  Channel: %d\n", ESPNOW_WIFI_CHANNEL);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_recv_cb(onDataReceived);
  Serial.println("Configuración completa. Esperando que un maestro transmita un mensaje...");
}

void loop() {
  // Nada que hacer aquí
}
